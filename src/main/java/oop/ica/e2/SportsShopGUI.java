/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.e2;

import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author W9641416
 */
public class SportsShopGUI extends javax.swing.JFrame {

    /**
     * Creates new form SportsShopGUI
     */
    static ArrayList<ASCStockItem> arraylist = new ArrayList();

    static String read;
    static int option;
    private String headerNames[] = new String[]{"Item Code", "Product Name", "Description", "price", "units"};
    ASCTableModel aSCTableModel;
    private ArrayList<BufferedImage> imageList = new ArrayList<>();

    //
    public static final String Delimiter = ",";

    public SportsShopGUI() {
        initComponents();
        try {
            load();
            loadTSProduct();
            loadImages();
        } catch (FileNotFoundException fnf) {
            System.out.println("file not founds");
        } catch (IOException ioe) {
            System.out.println(" input out put exception");
        }
        if (arraylist.isEmpty()) {
            System.out.println("data error:unable to proceed");
            System.exit(0);
        }

        aSCTableModel = new ASCTableModel(headerNames, arraylist);
        ascStockItem.setModel(aSCTableModel);

        for (int colum = 0; colum < ascStockItem.getColumnCount(); colum++) {
            TableColumn column = ascStockItem.getTableHeader().getColumnModel().getColumn(colum);
            column.setHeaderValue(headerNames[colum]);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ascStockItem = new javax.swing.JTable();
        photoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        buyXButton = new javax.swing.JButton();
        addXButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ascStockItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        ascStockItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ascStockItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ascStockItem);

        photoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        photoLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        itemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout photoPanelLayout = new javax.swing.GroupLayout(photoPanel);
        photoPanel.setLayout(photoPanelLayout);
        photoPanelLayout.setHorizontalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        photoPanelLayout.setVerticalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photoPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        buyXButton.setText("BuyX");
        buyXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyXButtonActionPerformed(evt);
            }
        });

        addXButton.setText("AddX");
        addXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addXButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 0, 51));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(photoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(buyXButton)
                        .addGap(18, 18, 18)
                        .addComponent(addXButton)
                        .addGap(18, 18, 18)
                        .addComponent(quitButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buyXButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buyButton)
                        .addComponent(addButton)
                        .addComponent(addXButton)
                        .addComponent(quitButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        addStock();
    }//GEN-LAST:event_addButtonActionPerformed

    private void ascStockItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ascStockItemMouseClicked
        // TODO add your handling code here:
        int row = ascStockItem.getSelectedRow();
        displayImage(row);
        int quantity = (int) aSCTableModel.getValueAt(row, 4);
        if (quantity < 5) {
            String productTitle = (String) aSCTableModel.getValueAt(row, 1);
            JOptionPane.showMessageDialog(null, productTitle + " has only" + quantity + " units of stock.", "Low Stock Warning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_ascStockItemMouseClicked

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // TODO add your handling code here:
        buyItem();
    }//GEN-LAST:event_buyButtonActionPerformed

    private void buyXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyXButtonActionPerformed
        // TODO add your handling code here:
        buyXItem();
    }//GEN-LAST:event_buyXButtonActionPerformed

    private void addXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addXButtonActionPerformed
        // TODO add your handling code here:
        addXStock();
    }//GEN-LAST:event_addXButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        quit();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SportsShopGUI().setVisible(true);
            }
        });
    }

    static void load() throws FileNotFoundException, IOException {//method to load arraylist with objects

        //declarations
        File file = new File("AsherSportsConsortium3.csv");
        Scanner filescanner;
        if (file.exists()) {
            //set scanner to te file object

            filescanner = new Scanner(file);
            while (filescanner.hasNextLine()) {
                //read and trim line
                String readline = filescanner.nextLine().trim();
                //check line has content
                if (!readline.isEmpty()) {

                    //parse tokens
                    String productCode = readline.split(Delimiter)[0];
                    String productTitle = readline.split(Delimiter)[1];
                    String productDescription = readline.split(Delimiter)[2];
                    int quantity = Integer.parseInt(readline.split(Delimiter)[5]);
                    int pounds = Integer.parseInt(readline.split(Delimiter)[3]);
                    int pences = Integer.parseInt(readline.split(Delimiter)[4]);
                    //adding object to arraylist
                    arraylist.add(new ASCStockItem(productCode, productTitle, productDescription, pounds, pences, quantity));
                }
            }//while close
            //close file stream by closing scanner
            filescanner.close();

        }

    }
    
     static void loadTSProduct() throws FileNotFoundException, IOException {//method to load arraylist with objects

        //declarations
        File file = new File("ts_products.txt");
        Scanner filescanner;
        if (file.exists()) {
            //set scanner to te file object

            filescanner = new Scanner(file);
            while (filescanner.hasNextLine()) {
                //read and trim line
                String readline = filescanner.nextLine().trim();
                //check line has content
                if (!readline.isEmpty()) {

                    //parse tokens
                    String skuNumber = readline.split(Delimiter)[0];
                    String make = readline.split(Delimiter)[1];
                    String  model= readline.split(Delimiter)[2];
                    String  colour= readline.split(Delimiter)[3];
                    String  notes= readline.split(Delimiter)[4];
                    String price=readline.split(Delimiter)[5];
                    int stock=Integer.parseInt(readline.split(Delimiter)[6]);
                    int pounds,pences;
                    pounds=(int)Double.parseDouble(price);
                   
                    pences=(int)((Double.parseDouble(price)-pounds)*100);
               
                    
                   arraylist.add(new TSProducttoASCSystemAdaptor(skuNumber, make, model, colour, notes, pounds, pences, stock));
                }
            }//while close
            //close file stream by closing scanner
            filescanner.close();

        }

    }

    // method to buyItem
    void buyItem() {
        if (ascStockItem.getSelectedRow() >= 0) {
            int row = ascStockItem.getSelectedRow();
            String productCode = (String) aSCTableModel.getValueAt(row, 0);
            String productTitle = (String) aSCTableModel.getValueAt(row, 1);
            String price = (String) aSCTableModel.getValueAt(row, 3);
            int quantity = (int) aSCTableModel.getValueAt(row, 4);
            if (quantity > 0) {
                quantity--;
                aSCTableModel.setValueAt(quantity, row, 4);

                JOptionPane.showMessageDialog(null, "Item:" + productTitle + "\nPrice " + price + "\n Units bought: 1 \n Stock remaining:  " + quantity, "Conformation of Sale", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "No Units of " + productTitle + " In stock", "No Stock", JOptionPane.WARNING_MESSAGE);

            }
            if (quantity < 5) {
                JOptionPane.showMessageDialog(null, productTitle + " has only" + quantity + " units of stock.", "Low Stock Warning", JOptionPane.WARNING_MESSAGE);
            }
            ascStockItem.clearSelection();
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item for the Table", "No Item Selected", JOptionPane.ERROR_MESSAGE);
        }
    }

    // method to buyItem
    void buyXItem() {
        if (ascStockItem.getSelectedRow() >= 0) {
            int row = ascStockItem.getSelectedRow();
            String productCode = (String) aSCTableModel.getValueAt(row, 0);
            String productTitle = (String) aSCTableModel.getValueAt(row, 1);
            String price = (String) aSCTableModel.getValueAt(row, 3);
            int quantity = (int) aSCTableModel.getValueAt(row, 4);

            Integer objects[] = new Integer[quantity];
            for (int i = 0; i <= objects.length - 1; i++) {
                objects[i] = i + 1;
            }
            Object value = JOptionPane.showInputDialog(null, "Please select a value", "Option Dialog Example", JOptionPane.QUESTION_MESSAGE, null, objects, objects[0]);
            int number = (Integer) value;
            if (quantity > 0 && quantity >= number) {
                quantity -= number;
                aSCTableModel.setValueAt(quantity, row, 4);

                JOptionPane.showMessageDialog(null, "Item:" + productTitle + "\nPrice " + price + "\n Units bought: 1 \n Stock remaining:  " + quantity, "Conformation of Sale", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "No Units of " + productTitle + " In stock", "No Stock", JOptionPane.WARNING_MESSAGE);

            }
            if (quantity < 5) {
                JOptionPane.showMessageDialog(null, productTitle + " has only " + quantity + " units of stock.", "Low Stock Warning", JOptionPane.WARNING_MESSAGE);
            }
            ascStockItem.clearSelection();
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item for the Table", "No Item Selected", JOptionPane.ERROR_MESSAGE);
        }
    }

    // method to add stock
    void addStock() {
        if (ascStockItem.getSelectedRow() >= 0) {
            int row = ascStockItem.getSelectedRow();
            String productCode = (String) aSCTableModel.getValueAt(row, 0);
            String productTitle = (String) aSCTableModel.getValueAt(row, 1);
            String price = (String) aSCTableModel.getValueAt(row, 3);
            int quantity = (int) aSCTableModel.getValueAt(row, 4);
            System.out.println(quantity);

            quantity = quantity + 1;
            System.out.println(quantity);
            aSCTableModel.setValueAt(quantity, row, 4);

            JOptionPane.showMessageDialog(null, "Item:" + productTitle + "\n Units bought: 1 \n New Stock remaining:  " + quantity, "Conformation of Added stock", JOptionPane.INFORMATION_MESSAGE);

            if (quantity < 5) {
                JOptionPane.showMessageDialog(null, productTitle + " has only" + quantity + " units of stock.", "Low Stock Warning", JOptionPane.WARNING_MESSAGE);
            }
            ascStockItem.clearSelection();
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item for the Table", "No Item Selected", JOptionPane.ERROR_MESSAGE);
        }
    }

    // method to add stock
    void addXStock() {
        if (ascStockItem.getSelectedRow() >= 0) {
            int row = ascStockItem.getSelectedRow();
            String productCode = (String) aSCTableModel.getValueAt(row, 0);
            String productTitle = (String) aSCTableModel.getValueAt(row, 1);
            String price = (String) aSCTableModel.getValueAt(row, 3);
            int quantity = (int) aSCTableModel.getValueAt(row, 4);
            System.out.println(quantity);

            Integer objects[] = new Integer[6];
            for (int i = 0; i <= objects.length - 1; i++) {
                objects[i] = 5 + i;
            }
            Object value = JOptionPane.showInputDialog(null, "Please select a value", "Option Dialog Example", JOptionPane.QUESTION_MESSAGE, null, objects, objects[0]);
            quantity = quantity + (Integer) value;
            aSCTableModel.setValueAt(quantity, row, 4);

            ascStockItem.clearSelection();

        } else {
            JOptionPane.showMessageDialog(null, "Please select an item for the Table", "No Item Selected", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadImages() {

        //loop through flower array
        for (int index = 0; index < arraylist.size(); index++) {

            //get photo filename form stock list item
            String filename = "asc_pics/" + arraylist.get(index).getItem() + ".jpg";

            //create buffered image object - set to null if loading fails
            BufferedImage image = null;

            //try to load image
            try {
                image = ImageIO.read(new File(filename));
            } catch (IOException e) {
                //log and report error - but no need to exit or return
                String message = "Unable to load image '" + filename + "'";
                Logger.getLogger(SportsShopGUI.class.getName()).log(Level.WARNING, null, message);
                System.err.println("\n\n!!!!! " + message + " !!!!!\n");
            } finally {
                //add either loaded image or null to arraylist
                imageList.add(image);
            }
        }
    }

    private void displayImage(int index) {
        //clear any text or images in labels

        photoLabel.setIcon(null);
        itemLabel.setText("");

        //get buffered image
        BufferedImage image = imageList.get(index);

        //check if image is null
        if (image == null) {
            //set text of label
            // photoLabel.setIcon(icon);
            itemLabel.setText("Default Image");
        } else {
            //set photolabel using photo array list
            photoLabel.setIcon(new ImageIcon(image));

            //set text of item label
            itemLabel.setText(arraylist.get(index).getItem());
        }
    }

    void quit() { //quit method

        try {
            saveFile();
        } catch (FileNotFoundException fne) {
            fne.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        System.exit(0); // exit from program
    }//end of method

    //method to save arraylist contents to file
    void saveFile() throws IOException, FileNotFoundException {
        //output file and creating path object
        Path path = Paths.get("asc_output.txt");
        //delete file if it exists, as we intend to write and not append
        Files.deleteIfExists(path);
        //create buffered ouput stream object
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(Files.newOutputStream(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE));
        //output string
        String read = "";
        //loop through arraylist
         for (int index = 0; index <aSCTableModel.getRowCount(); index++) {
            read += aSCTableModel.getValueAt(index, 0) + Delimiter;
            read += aSCTableModel.getValueAt(index, 1)+ Delimiter;
            read += aSCTableModel.getValueAt(index, 2) + Delimiter;
            
            String price=(String)aSCTableModel.getValueAt(index, 3);
           price=price.replace("£", " ").trim();
            double dpounds=Double.parseDouble(price);
             int pounds=(int)dpounds;
             int pences=(int)(dpounds*100-pounds*100);
           
          read+=pounds+Delimiter+pences+Delimiter;
            read += aSCTableModel.getValueAt(index, 4)+ "\r\n";
        }//end of for-loop
        
      

        //transform output string to byte array
        byte data[] = read.getBytes();
        //write byte array to the stream
        bufferedOutputStream.write(data, 0, data.length);
        //close buffer so stream writes to file
        bufferedOutputStream.close();
        JOptionPane.showMessageDialog(null, "Data written to file at: " + path.toAbsolutePath(), "Data Saved", JOptionPane.INFORMATION_MESSAGE);

        //confirm data written
        System.out.println("Data written to file at: " + path.toAbsolutePath().toString());
        System.exit(0);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addXButton;
    private javax.swing.JTable ascStockItem;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton buyXButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JPanel photoPanel;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables
}
